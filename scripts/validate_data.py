#!/usr/bin/env python3
"""
Script de valida√ß√£o de dados para verificar consist√™ncia entre 
src/, tests/, notebooks/ e documenta√ß√£o.
"""

import sys
import os
sys.path.append('src')

from data_loader import load_seeds_data
import pandas as pd
import numpy as np
from config import FEATURE_NAMES

def main():
    """Executa valida√ß√£o completa dos dados do projeto."""
    
    print("="*60)
    print("üîç VALIDA√á√ÉO DE INTEGRIDADE DOS DADOS")
    print("="*60)
    
    # Carregar dados
    try:
        df = load_seeds_data()
        print(f"‚úÖ Dataset carregado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao carregar dataset: {e}")
        return
    
    # Valida√ß√µes b√°sicas
    print(f"\nüìä INFORMA√á√ïES B√ÅSICAS:")
    print(f"   ‚Ä¢ Amostras: {len(df)}")
    print(f"   ‚Ä¢ Caracter√≠sticas: {len(FEATURE_NAMES)}")
    print(f"   ‚Ä¢ Classes: {df['variety'].nunique()}")
    print(f"   ‚Ä¢ Missing values: {df.isnull().sum().sum()}")
    print(f"   ‚Ä¢ Duplicatas: {df.duplicated().sum()}")
    
    # Distribui√ß√£o das classes
    print(f"\nüéØ DISTRIBUI√á√ÉO DAS CLASSES:")
    class_counts = df['variety'].value_counts().sort_index()
    for variety, count in class_counts.items():
        variety_name = {1: 'Kama', 2: 'Rosa', 3: 'Canadian'}[variety]
        print(f"   ‚Ä¢ {variety_name} (Classe {variety}): {count} amostras")
    
    # Coeficientes de Varia√ß√£o
    print(f"\nüìà COEFICIENTES DE VARIA√á√ÉO:")
    for col in FEATURE_NAMES:
        cv = (df[col].std() / df[col].mean()) * 100
        print(f"   ‚Ä¢ {col}: {cv:.1f}%")
    
    # Correla√ß√µes principais
    print(f"\nüîó CORRELA√á√ïES PRINCIPAIS:")
    corr_matrix = df[FEATURE_NAMES].corr()
    correlations = [
        ('area', 'perimeter'),
        ('area', 'kernel_length'),
        ('area', 'kernel_width'),
        ('kernel_length', 'kernel_width'),
        ('perimeter', 'kernel_length')
    ]
    
    for col1, col2 in correlations:
        corr_value = corr_matrix.loc[col1, col2]
        print(f"   ‚Ä¢ {col1} √ó {col2}: {corr_value:.3f}")
    
    # Estat√≠sticas por variedade (√°rea)
    print(f"\nüåæ ESTAT√çSTICAS POR VARIEDADE (√ÅREA):")
    for variety in [1, 2, 3]:
        variety_data = df[df['variety'] == variety]
        mean_area = variety_data['area'].mean()
        std_area = variety_data['area'].std()
        variety_name = {1: 'Kama', 2: 'Rosa', 3: 'Canadian'}[variety]
        print(f"   ‚Ä¢ {variety_name}: Œº={mean_area:.3f}, œÉ={std_area:.3f}")
    
    # Ranges das caracter√≠sticas
    print(f"\nüìè RANGES DAS CARACTER√çSTICAS:")
    for col in FEATURE_NAMES:
        min_val = df[col].min()
        max_val = df[col].max()
        print(f"   ‚Ä¢ {col}: {min_val:.3f} - {max_val:.3f}")
    
    # Valida√ß√£o de qualidade
    print(f"\n‚úÖ VALIDA√á√ÉO DE QUALIDADE:")
    
    # Verificar valores extremos
    outliers_count = 0
    for col in FEATURE_NAMES:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers = ((df[col] < lower_bound) | (df[col] > upper_bound)).sum()
        outliers_count += outliers
        if outliers > 0:
            print(f"   ‚Ä¢ {col}: {outliers} outliers detectados")
    
    if outliers_count == 0:
        print("   ‚úÖ Nenhum outlier extremo detectado")
    
    # Verificar balanceamento
    class_balance = df['variety'].value_counts()
    is_balanced = all(count == class_balance.iloc[0] for count in class_balance)
    if is_balanced:
        print("   ‚úÖ Classes perfeitamente balanceadas")
    else:
        print("   ‚ö†Ô∏è  Classes desbalanceadas")
    
    # Verificar consist√™ncia de compacidade
    print(f"\nüßÆ VALIDA√á√ÉO DE COMPACIDADE:")
    calculated_compactness = (4 * np.pi * df['area']) / (df['perimeter'] ** 2)
    compactness_diff = np.abs(df['compactness'] - calculated_compactness)
    max_diff = compactness_diff.max()
    mean_diff = compactness_diff.mean()
    
    print(f"   ‚Ä¢ Diferen√ßa m√°xima: {max_diff:.6f}")
    print(f"   ‚Ä¢ Diferen√ßa m√©dia: {mean_diff:.6f}")
    
    if max_diff < 0.001:
        print("   ‚úÖ Compacidade calculada corretamente")
    else:
        print("   ‚ö†Ô∏è  Poss√≠vel inconsist√™ncia na compacidade")
    
    print(f"\n" + "="*60)
    print("üéâ VALIDA√á√ÉO CONCLU√çDA")
    print("="*60)

if __name__ == "__main__":
    main()